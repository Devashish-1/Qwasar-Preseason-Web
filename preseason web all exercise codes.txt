All codes for exercises
#################################

My Fibonacci is in C language

int my_fibonacci(int n) {
  if (n < 0) {
    return -1;
  } else if (n == 0) {
    return 0;
  } else if (n == 1) {
    return 1;
  } else {
    return my_fibonacci(n - 1) + my_fibonacci(n - 2);
  }
}

##################################################

Hello |Name is In C++(cpp)
#include <string>

std::string hello_name(const std::string& name) {
  std::string greeting = "Hello " + name;
  return greeting;
}
#################################################

my putstr in C language
#include <stdio.h>

void my_putstr(char* param_1) {
    while (*param_1 != '\0') {
        putchar(*param_1);
        param_1++;
    }
}

int Main() {
    char str[] = "abc";
    my_putstr(str);
    return 0;
}

#############################################
my strchr in c language

#include <string.h>
#include <stdio.h>
char* my_strchr(char* str1, char str2)
{
    char* str3[strlen(str1)];
    int count = 0;
    for (int i = 0 ; i < strlen(str1) ; i++) {
        if(str1[i] != str2){
            count++;
        }else if(str1[i] == str2){
            for (int j = 0 ; j < strlen(str1) ; j++) {
                str3[j] = &str1[i];
                i++;
            }
        }
    }
    if(count == strlen(str1)){
        return NULL;
    }else{
        return *str3;
    }
}
#########################################
my recursive pow in javascript(js)

function my_recursive_pow(base, exponent) {
  if (exponent == 0)
    return 1;
  else
    return base * my_recursive_pow(base, exponent - 1);
}
###############################
my array uniq in C language

#include <stdio.h>
#include <stdlib.h>

#ifndef STRUCT_INTEGER_ARRAY
#define STRUCT_INTEGER_ARRAY
typedef struct s_integer_array
{
    int size;
    int* array;
} integer_array;
#endif

int is_duplicate(int* array, int size, int value) {
    for (int i = 0; i < size; i++) {
        if (array[i] == value) {
            return 1; 
        }
    }
    return 0; 
}

integer_array* my_array_uniq(integer_array* param_1) {
    if (param_1 == NULL || param_1->array == NULL || param_1->size <= 0) {
        return param_1;
    }

    integer_array* result = (integer_array*)malloc(sizeof(integer_array));
    result->array = (int*)malloc(param_1->size * sizeof(int));

    int newSize = 0;

    for (int i = 0; i < param_1->size; i++) {
        if (!is_duplicate(result->array, newSize, param_1->array[i])) {
            result->array[newSize++] = param_1->array[i];
        }
    }

    result->size = newSize;

    return result;
}

int Main() {
    int arr0[] = {1, 1, 2};
    integer_array param0 = {3, arr0};
    integer_array* result0 = my_array_uniq(&param0);
    printf("Example 00: [");
    for (int i = 0; i < result0->size; i++) {
        printf("%d", result0->array[i]);
        if (i < result0->size - 1) {
            printf(", ");
        }
    }
    printf("]\n");  

    int arr1[] = {};
    integer_array param1 = {0, arr1};
    integer_array* result1 = my_array_uniq(&param1);
    printf("Example 01: []\n");  

    int arr2[] = {1, 1, 1, 2, 3, 4, 1};
    integer_array param2 = {7, arr2};
    integer_array* result2 = my_array_uniq(&param2);
    printf("Example 02: [");
    for (int i = 0; i < result2->size; i++) {
        printf("%d", result2->array[i]);
        if (i < result2->size - 1) {
            printf(", ");
        }
    }
    printf("]\n");  

    free(result0->array);
    free(result0);
    free(result2->array);
    free(result2);

    return 0;
}

###################################################
my add in c lanuage

#include <stdio.h>

int my_add(int param_1, int param_2) {
    int result = param_1 + param_2;
    return result;
}

int Main() {
    int result1 = my_add(0, 1);
    printf("Example 00: %d\n", result1);  
  
    int result2 = my_add(10, 10);
    printf("Example 01: %d\n", result2);  

    int result3 = my_add(-10, 10);
    printf("Example 02: %d\n", result3); 

    return 0;
}
#############################################
my each in C lang

#include <stdio.h>

#ifndef STRUCT_STRING_ARRAY
#define STRUCT_STRING_ARRAY
typedef struct s_string_array
{
    int size;
    char** array;
} string_array;
#endif

void my_each(string_array* param_1)
{
    if (param_1 == NULL || param_1->array == NULL) {
        return;
    }

    for (int i = 0; i < param_1->size; i++) {
        printf("%s\n", param_1->array[i]);
    }
}

int Main() {
    string_array arr1 = {3, (char*[]){"blah1", "blah2", "blah3"}};
    my_each(&arr1);

    string_array arr2 = {2, (char*[]){"blah1", "blah2"}};
    my_each(&arr2);

    string_array arr3 = {1, (char*[]){"1arg"}};
    my_each(&arr3);

    return 0;
}

###########################################################
my string index in C lang

#include <stdio.h>
int my_string_index(char* param_1, char param_2)
{
    if (param_1 == NULL) {
        return -1;
    }

    for (int i = 0; param_1[i] != '\0'; i++) {
        if (param_1[i] == param_2) {
            return i;
        }
    }
    return -1;
}

int Main() {
    printf("Example 00: %d\n", my_string_index("hello", 'l')); 

    printf("Example 01: %d\n", my_string_index("aaaaa", 'b')); 

    return 0;
}
############################################################
my string formatting in c language

#include <stdio.h>
void my_string_formatting(char* param_1, char* param_2, int param_3)
{
    printf("Hello, my name is %s %s, I'm %d.\n", param_1, param_2, param_3);
}

int Main() {
    my_string_formatting("john", "doe", 37);
    my_string_formatting("Baby", "Yoda", 50);
    my_string_formatting("Marie", "Curie", 26);

    return 0;
}
###########################################################
my_count_on_it in C lang

#include <stdio.h>
#include <stdlib.h>

#ifndef STRUCT_STRING_ARRAY
#define STRUCT_STRING_ARRAY
typedef struct s_string_array
{
    int size;
    char** array;
} string_array;
#endif

#ifndef STRUCT_INTEGER_ARRAY
#define STRUCT_INTEGER_ARRAY
typedef struct s_integer_array
{
    int size;
    int* array;
} integer_array;
#endif

integer_array* my_count_on_it(string_array* param_1)
{
    if (param_1 == NULL || param_1->array == NULL) {
        return NULL;
    }
    integer_array* result = (integer_array*)malloc(sizeof(integer_array));
    if (result == NULL) {
        return NULL;
    }
    result->size = param_1->size;
    result->array = (int*)malloc(sizeof(int) * result->size);
    if (result->array == NULL) {
        free(result);
        return NULL;
    }
    for (int i = 0; i < param_1->size; i++) {
        int length = 0;
        while (param_1->array[i][length] != '\0') {
            length++;
        }
        result->array[i] = length;
    }

    return result;
}
void free_integer_array(integer_array* arr) {
    if (arr != NULL) {
        free(arr->array);
        free(arr);
    }
}

int Main() {
    string_array arr0 = {4, (char*[]){"This", "is", "the", "way"}};
    integer_array* result0 = my_count_on_it(&arr0);
    if (result0 != NULL) {
        for (int i = 0; i < result0->size; i++) {
            printf("%d ", result0->array[i]);
        }
        printf("\n");
        free_integer_array(result0);
    }
    string_array arr1 = {2, (char*[]){"aBc", "AbcE Fgef1"}};
    integer_array* result1 = my_count_on_it(&arr1);
    if (result1 != NULL) {
        for (int i = 0; i < result1->size; i++) {
            printf("%d ", result1->array[i]);
        }
        printf("\n");
        free_integer_array(result1);
    }
    string_array arr2 = {1, (char*[]){"aBc"}};
    integer_array* result2 = my_count_on_it(&arr2);
    if (result2 != NULL) {
        for (int i = 0; i < result2->size; i++) {
            printf("%d ", result2->array[i]);
        }
        printf("\n");
        free_integer_array(result2);
    }

    return 0;
}
##########################################################








